from django.db import models
from django.utils import timezone
from simple_history.models import HistoricalRecords

from setting.models import Action,Exercice,EtapeExecutionGlob,Tache,Operation,NatureDepense,GroupeDepense,EtapeExecution

class EstExecuteeAction(models.Model):
    action = models.ForeignKey(Action, on_delete=models.CASCADE)
    exercice = models.ForeignKey(Exercice, on_delete=models.CASCADE)
    etape_execution_glob = models.ForeignKey(
        EtapeExecutionGlob, on_delete=models.CASCADE, null=True, blank=True
    )
    montant_ae_init = models.FloatField()
    montant_cp_init = models.FloatField()
    montant_ae_rev = models.FloatField()
    montant_cp_rev = models.FloatField()
    dateimport = models.DateField(default=timezone.now)
    montant_ae_eng = models.FloatField()
    montant_cp_eng = models.FloatField()
    montant_liq = models.FloatField()
    pourcentage_ae_eng = models.DecimalField(max_digits=4, decimal_places=2)
    pourcentage_cp_eng = models.DecimalField(max_digits=4, decimal_places=2)
    liquidation = models.FloatField()
    ordonancement = models.FloatField()
    pourcentage_liq = models.DecimalField(max_digits=4, decimal_places=2)
    pourcentage_ord = models.DecimalField(max_digits=4, decimal_places=2)
    pourcentage_RPHY_cp = models.DecimalField(max_digits=4, decimal_places=2)
    ressource_mobilise = models.CharField(max_length=50)
    history = HistoricalRecords()


class EstExecuteeFCPDR(models.Model):
    exercice = models.ForeignKey(Exercice, on_delete=models.CASCADE)
    tache = models.ForeignKey(Tache, on_delete=models.CASCADE)
    etape_execution_glob = models.ForeignKey(
        EtapeExecutionGlob, on_delete=models.SET_NULL, null=True
    )
    montant_ae_init = models.FloatField()
    montant_cp_init = models.FloatField()
    montant_ae_rev = models.FloatField()
    montant_cp_rev = models.FloatField()
    dateimport = models.DateField(default=timezone.now)
    montant_ae_eng = models.FloatField()
    montant_cp_eng = models.FloatField()
    montant_liq = models.FloatField()
    pourcentage_ae_eng = models.DecimalField(max_digits=4, decimal_places=2)
    pourcentage_cp_eng = models.DecimalField(max_digits=4, decimal_places=2)
    liquidation = models.FloatField()
    ordonancement = models.FloatField()
    pourcentage_liq = models.DecimalField(max_digits=4, decimal_places=2)
    pourcentage_ord = models.DecimalField(max_digits=4, decimal_places=2)
    pourcentage_RPHY_cp = models.DecimalField(max_digits=4, decimal_places=2)
    gc_category_ressource = models.CharField(max_length=45)
    contrat_situation_actuelle = models.TextField()
    montant_contrat = models.FloatField()
    date_demarrage_travaux = models.DateTimeField()
    delai_execution_contrat = models.IntegerField()
    history = HistoricalRecords()


class EstExecuteeFCPTDD(models.Model):
    exercice = models.ForeignKey(Exercice, on_delete=models.CASCADE)
    tache = models.ForeignKey(Tache, on_delete=models.CASCADE)
    montant_ae_init = models.FloatField()
    montant_cp_init = models.FloatField()
    montant_ae_rev = models.FloatField()
    montant_cp_rev = models.FloatField()
    dateimport = models.DateField(default=timezone.now)
    montant_ae_eng = models.FloatField()
    montant_cp_eng = models.FloatField()
    montant_liq = models.FloatField()
    pourcentage_ae_eng = models.DecimalField(max_digits=4, decimal_places=2)
    pourcentage_cp_eng = models.DecimalField(max_digits=4, decimal_places=2)
    liquidation = models.FloatField()
    ordonancement = models.FloatField()
    pourcentage_liq = models.DecimalField(max_digits=4, decimal_places=2)
    pourcentage_ord = models.DecimalField(max_digits=4, decimal_places=2)
    pourcentage_RPHY_cp = models.DecimalField(max_digits=4, decimal_places=2)
    gc_category_ressource = models.CharField(max_length=45)
    contrat_situation_actuelle = models.TextField()
    montant_contrat = models.FloatField()
    date_demarrage_travaux = models.DateTimeField()
    delai_execution_contrat = models.IntegerField()
    history = HistoricalRecords()


class EstExecuteeGCAUTRES(models.Model):
    exercice = models.ForeignKey(Exercice, on_delete=models.CASCADE)
    tache = models.ForeignKey(Tache, on_delete=models.CASCADE)
    montant_ae_init = models.FloatField()
    montant_cp_init = models.FloatField()
    montant_ae_rev = models.FloatField()
    montant_cp_rev = models.FloatField()
    dateimport = models.DateField(default=timezone.now)
    montant_ae_eng = models.FloatField()
    montant_cp_eng = models.FloatField()
    montant_liq = models.FloatField()
    pourcentage_ae_eng = models.DecimalField(max_digits=4, decimal_places=2)
    pourcentage_cp_eng = models.DecimalField(max_digits=4, decimal_places=2)
    liquidation = models.FloatField()
    ordonancement = models.FloatField()
    pourcentage_liq = models.DecimalField(max_digits=4, decimal_places=2)
    pourcentage_ord = models.DecimalField(max_digits=4, decimal_places=2)
    pourcentage_RPHY_cp = models.DecimalField(max_digits=4, decimal_places=2)
    gc_category_ressource = models.CharField(max_length=45)
    contrat_situation_actuelle = models.TextField()
    montant_contrat = models.FloatField()
    date_demarrage_travaux = models.DateTimeField()
    delai_execution_contrat = models.IntegerField()
    history = HistoricalRecords()


class EstExecuteeGCSUB(models.Model):
    exercice = models.ForeignKey(Exercice, on_delete=models.CASCADE)
    tache = models.ForeignKey(Tache, on_delete=models.CASCADE)
    montant_ae_init = models.FloatField()
    montant_cp_init = models.FloatField()
    montant_ae_rev = models.FloatField()
    montant_cp_rev = models.FloatField()
    dateimport = models.DateField(default=timezone.now)
    montant_ae_eng = models.FloatField()
    montant_cp_eng = models.FloatField()
    montant_liq = models.FloatField()
    pourcentage_ae_eng = models.DecimalField(max_digits=4, decimal_places=2)
    pourcentage_cp_eng = models.DecimalField(max_digits=4, decimal_places=2)
    liquidation = models.FloatField()
    ordonancement = models.FloatField()
    pourcentage_liq = models.DecimalField(max_digits=4, decimal_places=2)
    pourcentage_ord = models.DecimalField(max_digits=4, decimal_places=2)
    pourcentage_RPHY_cp = models.DecimalField(max_digits=4, decimal_places=2)
    gc_category_ressource = models.CharField(max_length=45)
    contrat_situation_actuelle = models.TextField()
    montant_contrat = models.FloatField()
    date_demarrage_travaux = models.DateTimeField()
    delai_execution_contrat = models.IntegerField()
    history = HistoricalRecords()


class EstExecuteeModeGestion(models.Model):
    nature_depense = models.ForeignKey(NatureDepense, on_delete=models.CASCADE)
    exercice = models.ForeignKey(Exercice, on_delete=models.CASCADE)
    etape_execution_glob = models.ForeignKey(
        EtapeExecutionGlob, on_delete=models.SET_NULL, null=True
    )
    montant_ae_init = models.FloatField()
    montant_cp_init = models.FloatField()
    montant_ae_rev = models.FloatField()
    montant_cp_rev = models.FloatField()
    dateimport = models.DateField(default=timezone.now)
    montant_ae_eng = models.FloatField()
    montant_cp_eng = models.FloatField()
    montant_liq = models.FloatField()
    pourcentage_ae_eng = models.DecimalField(max_digits=4, decimal_places=2)
    pourcentage_cp_eng = models.DecimalField(max_digits=4, decimal_places=2)
    liquidation = models.FloatField()
    ordonancement = models.FloatField()
    pourcentage_liq = models.DecimalField(max_digits=4, decimal_places=2)
    pourcentage_ord = models.DecimalField(max_digits=4, decimal_places=2)
    pourcentage_RPHY_cp = models.DecimalField(max_digits=4, decimal_places=2)
    history = HistoricalRecords()


class EstExecuteeOperationFDCDR(models.Model):
    operation = models.ForeignKey(Operation, on_delete=models.CASCADE)
    exercice = models.ForeignKey(Exercice, on_delete=models.CASCADE)
    groupe_depense = models.ForeignKey(GroupeDepense, on_delete=models.CASCADE)
    montant_ae_init = models.FloatField()
    montant_cp_init = models.FloatField()
    montant_ae_rev = models.FloatField()
    montant_cp_rev = models.FloatField()
    dateimport = models.DateField(default=timezone.now)
    montant_ae_eng = models.FloatField()
    montant_cp_eng = models.FloatField()
    montant_liq = models.FloatField()
    pourcentage_ae_eng = models.DecimalField(max_digits=4, decimal_places=2)
    pourcentage_cp_eng = models.DecimalField(max_digits=4, decimal_places=2)
    liquidation = models.FloatField()
    ordonancement = models.FloatField()
    pourcentage_liq = models.DecimalField(max_digits=4, decimal_places=2)
    pourcentage_ord = models.DecimalField(max_digits=4, decimal_places=2)
    pourcentage_RPHY_cp = models.DecimalField(max_digits=4, decimal_places=2)
    gc_category_ressource = models.CharField(max_length=45)
    contrat_situation_actuelle = models.TextField()
    montant_contrat = models.FloatField()
    date_demarrage_travaux = models.DateTimeField()
    delai_execution_contrat = models.IntegerField()
    observation = models.TextField()
    difficultes = models.TextField()
    montant_engage = models.FloatField()
    pourcentage_execution_physique_a_date = models.DecimalField(
        max_digits=4, decimal_places=2
    )
    history = HistoricalRecords()


class EstExecuteeSur(models.Model):
    tache = models.ForeignKey(Tache, on_delete=models.CASCADE)
    etape_execution = models.ForeignKey(
        EtapeExecution, on_delete=models.SET_NULL, null=True
    )
    date_debut = models.DateField()
    date_fin = models.DateField()
    chemin_extrant = models.CharField(max_length=150)
    ecart = models.IntegerField()
    difficultes_rencontrees = models.TextField()
    history = HistoricalRecords()


class EstProgramme(models.Model):
    tache = models.ForeignKey(Tache, on_delete=models.CASCADE)
    exercice = models.ForeignKey(Exercice, on_delete=models.CASCADE)
    montant_ae_init = models.FloatField()
    montant_cp_init = models.FloatField()
    montant_ae_rev = models.FloatField()
    montant_cp_rev = models.FloatField()
    history = HistoricalRecords()
